import { AsyncNode, AsyncFlow } from '../qflow.js';
import { ShellCommandNode } from './index.js'; // Assuming ShellCommandNode is available
import path from 'path';
import os from 'os';
import { promises as fs } from 'fs';

export class ImageGalleryNode extends AsyncNode {
  constructor(maxRetries = 1, wait = 0) {
    super(maxRetries, wait);
  }

  async execAsync() {
    const {
      imagePaths, // Array of absolute paths to image files
      title = 'Image Gallery',
      description = 'Generated by QFlow Agent',
      outputDir // Optional: directory to save the HTML file
    } = this.params;

    if (!imagePaths || !Array.isArray(imagePaths) || imagePaths.length === 0) {
      throw new Error('ImageGalleryNode requires an `imagePaths` array.');
    }

    const tempDir = outputDir || path.join(os.tmpdir(), `qflow_image_gallery_${Date.now()}`);
    await fs.mkdir(tempDir, { recursive: true });

    const htmlFilePath = path.join(tempDir, 'index.html');

    // Generate HTML content
    let imageHtml = '';
    for (const imagePath of imagePaths) {
      // For security and portability, it's best to embed images as base64 data URIs
      // or ensure they are served from a web-accessible location.
      // For simplicity in this node, we'll use file:// URLs, but this might have browser security warnings.
      // A more robust solution would involve a local web server (like BrowserGUINode).
      // For simplicity in this node, we'll assume direct file access for now.
      // Or, even better, copy images to the tempDir and reference them relatively.

      const imageName = path.basename(imagePath);
      const destImagePath = path.join(tempDir, imageName);
      try {
        await fs.copyFile(imagePath, destImagePath); // Copy image to temp dir
        imageHtml += `<div class="gallery-item">\n`;
        imageHtml += `  <img src="${imageName}" alt="${imageName}">\n`;
        imageHtml += `  <p>${imageName}</p>\n`;
        imageHtml += `</div>\n`;
      } catch (e) {
        console.warn(`[ImageGalleryNode] Could not copy image ${imagePath}: ${e.message}. Skipping.`);
      }
    }

    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body { font-family: sans-serif; margin: 20px; background-color: #f0f0f0; }
        h1 { color: #333; }
        p { color: #666; }
        .gallery-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .gallery-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            background-color: #f9f9f9;
        }
        .gallery-item img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 0 auto 10px auto;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <h1>${title}</h1>
    <p>${description}</p>
    <div class="gallery-container">
        ${imageHtml}
    </div>
</body>
</html>
`;

    await fs.writeFile(htmlFilePath, htmlContent);
    console.log(`[ImageGalleryNode] Generated HTML gallery at: ${htmlFilePath}`);

    // Open the HTML file in the default web browser
    const openBrowserCommand = os.platform() === 'darwin' ? `open "${htmlFilePath}"` :
                               os.platform() === 'win32' ? `start "" "${htmlFilePath}"` :
                               `xdg-open "${htmlFilePath}"`;

    const shellNode = new ShellCommandNode();
    shellNode.setParams({ command: openBrowserCommand });
    await new AsyncFlow(shellNode).runAsync({});
    console.log(`[ImageGalleryNode] Opened gallery in browser.`);

    return { status: 'gallery_displayed', htmlFilePath: htmlFilePath, imageCount: imagePaths.length };
  }
}